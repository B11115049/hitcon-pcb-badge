#ifndef GAME_H
#define GAME_H

#include <stddef.h>
#include <stdint.h>

/**
 * Definition of columns:
 * 0: self generated (unshared)
 * 1: self generated, shared with other players (send/receive)
 * 2: received from broadcasters scattered around the world
 * 3: (same as 2)
 * ...
 * 7: (same as 2)
 */

#define GAME_COLUMN_UNSHARED 0 // column index
#define GAME_COLUMN_SHARED 1   // column index

#define GAME_UPDATE_UNSHARED_PERIOD (10 * 60) // 10 minutes
#define GAME_UPDATE_SHARED_PERIOD (10 * 60)   // 10 minutes

#define GAME_NUM_COLUMNS 8
#define GAME_NUM_ROWS 16
#define GAME_DATA_SIZE 8

typedef int score_t;

typedef struct {
  uint8_t data[GAME_DATA_SIZE];
} grid_t;

typedef struct {
  grid_t data[GAME_NUM_COLUMNS][GAME_NUM_ROWS];
} storage_t;

// Initialize the game.
// If storage is NULL, this function will generate one.
void game_init(const storage_t *storage);

// Get the storage of the game. Can be used to save the game (persistent
// storage).
storage_t game_get_storage();

// Generate a new grid and replace existing grid if score is higher.
// Should be called periodically. (see GAME_UPDATE_SELF_PERIOD)
void game_update_unshared();

// Generate a new grid and replace existing grid if score is higher.
// Should be called periodically. (see GAME_UPDATE_SHARED_PERIOD)
// The difference between this function and game_update_unshared is that the
// grid generated by this function will be shared with other players.
void game_update_shared_periodic();

// Upon receiving other player's grid, call this function to check if the grid
// has higher score than the existing grid. If so, replace the existing grid.
void game_update_shared_event(void *event_data);

// Upon receiving broadcaster's grid, call this function to check if the grid
// has higher score than the existing grid. If so, replace the existing grid.
void game_update_broadcast_event(void *event_data);

#endif // GAME_H
